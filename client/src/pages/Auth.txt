import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useWebSocketContext } from "../context/WebSocketContext";

export default function Auth() {
    const navigate = useNavigate();
    const { sendMessage, subscribe, isConnected } = useWebSocketContext();

    const [activeTab, setActiveTab] = useState("login");
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [newUsername, setNewUsername] = useState("");
    const [newPassword, setNewPassword] = useState("");
    const [loading, setLoading] = useState(false);
    const [notification, setNotification] = useState({ show: false, message: "", type: "info" });

    const showNotification = (message, type = "info") => {
        setNotification({ show: true, message, type });
        setTimeout(() => setNotification((prev) => ({ ...prev, show: false })), 4000);
    };

    useEffect(() => {
        const unsubscribe = subscribe((res) => {
            switch (res.type) {
                case "login_response":
                    if (res.success) {
                        localStorage.setItem("session_id", res.data.session_id);
                        showNotification(res.message, "success");
                        setLoading(true);
                        setTimeout(() => navigate("/lobby"), 1000);
                    } else {
                        showNotification(res.message, "error");
                    }
                    break;

                case "register_response":
                    if (res.success) {
                        showNotification(res.message, "success");
                        setTimeout(() => setActiveTab("login"), 1500);
                    } else {
                        showNotification(res.message, "error");
                    }
                    break;

                default:
                    if (res.message) showNotification(res.message, "info");
                    break;
            }
        });

        return () => unsubscribe();
    }, [subscribe, navigate]);

    const handleLogin = () => {
        if (!username || !password)
            return showNotification("Please fill in both fields.", "warning");
        if (!isConnected)
            return showNotification("Not connected to server.", "error");

        sendMessage({
            type: "login",
            data: { username, password }
        });
    };

    const handleRegister = () => {
        if (!newUsername || !newPassword)
            return showNotification("Please fill in all fields.", "warning");
        if (!isConnected)
            return showNotification("Not connected to server.", "error");

        sendMessage({
            type: "register",
            data: {
                username: newUsername,
                password: newPassword
            }
        });
    };

    return (
        <div className="min-h-screen flex items-center justify-center p-5 bg-gradient-to-br from-blue-600 to-purple-600 overflow-hidden relative">
            {/* Animated Background Elements */}
            <div className="absolute inset-0 overflow-hidden">
                <div className="absolute top-10 left-10 w-20 h-20 bg-yellow-300 rounded-full opacity-30 animate-pulse"></div>
                <div className="absolute top-32 right-20 w-16 h-16 bg-red-400 rounded-full opacity-20 animate-bounce"></div>
                <div className="absolute bottom-20 left-32 w-24 h-24 bg-blue-300 rounded-full opacity-25 animate-pulse"></div>
                <div className="absolute bottom-40 right-40 w-12 h-12 bg-green-400 rounded-full opacity-20 animate-bounce"></div>
            </div>

            <div className="relative z-10 w-full max-w-md">
                {/* Crown Logo */}
                <div className="w-32 h-32 mx-auto mb-4 relative">
                    <div className="absolute inset-0 bg-yellow-400 rounded-full shadow-lg shadow-yellow-500/50 animate-pulse"></div>
                    <div className="absolute inset-4 bg-yellow-300 rounded-full flex items-center justify-center">
                        <div className="text-4xl text-yellow-600">üëë</div>
                    </div>
                </div>

                {/* Card Container */}
                <div className="bg-gradient-to-b from-blue-900/90 to-purple-900/90 rounded-xl shadow-2xl overflow-hidden border-4 border-yellow-500 transform transition-all duration-300">
                    {/* Header */}
                    <div className="flex flex-col items-center p-6 bg-gradient-to-r from-blue-800 to-purple-800 border-b-4 border-yellow-500">
                        <h2 className="text-4xl font-extrabold mb-6 text-yellow-400 tracking-wider">ROYAKA</h2>
                        <div className="flex w-full rounded-lg overflow-hidden border-2 border-yellow-400">
                            <button
                                onClick={() => setActiveTab("login")}
                                className={`flex-1 py-4 text-center font-bold relative transition-all duration-300 ${activeTab === "login"
                                        ? "text-yellow-400 bg-blue-900"
                                        : "text-blue-200 hover:text-yellow-300 bg-blue-800"
                                    }`}
                            >
                                LOGIN
                            </button>
                            <button
                                onClick={() => setActiveTab("register")}
                                className={`flex-1 py-4 text-center font-bold relative transition-all duration-300 ${activeTab === "register"
                                        ? "text-yellow-400 bg-blue-900"
                                        : "text-blue-200 hover:text-yellow-300 bg-blue-800"
                                    }`}
                            >
                                REGISTER
                            </button>
                        </div>
                    </div>

                    {activeTab === "login" ? (
                        <div className="p-6 animate-fadeIn">
                            <div className="text-center mb-6">
                                <h2 className="text-2xl font-bold text-yellow-300 mb-2">Welcome Back, Warrior!</h2>
                                <p className="text-blue-200 text-sm">Enter your credentials to continue the battle</p>
                            </div>

                            <div className="relative mb-5 group">
                                <div className="absolute left-4 top-1/2 -translate-y-1/2 text-blue-300 text-lg">
                                    üë§
                                </div>
                                <input
                                    type="text"
                                    value={username}
                                    onChange={(e) => setUsername(e.target.value)}
                                    placeholder="Username"
                                    className="w-full py-4 pl-12 pr-4 border-2 border-blue-400 bg-blue-900/50 text-blue-100 rounded-lg text-base transition-all focus:border-yellow-400 focus:shadow-md focus:shadow-yellow-400/20 outline-none placeholder-blue-300"
                                />
                            </div>

                            <div className="relative mb-8 group">
                                <div className="absolute left-4 top-1/2 -translate-y-1/2 text-blue-300 text-lg">
                                    üîí
                                </div>
                                <input
                                    type="password"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    placeholder="Password"
                                    className="w-full py-4 pl-12 pr-4 border-2 border-blue-400 bg-blue-900/50 text-blue-100 rounded-lg text-base transition-all focus:border-yellow-400 focus:shadow-md focus:shadow-yellow-400/20 outline-none placeholder-blue-300"
                                />
                            </div>

                            <button
                                onClick={handleLogin}
                                className="w-full py-4 bg-gradient-to-r from-yellow-500 to-yellow-400 text-blue-900 rounded-lg font-extrabold text-lg cursor-pointer transition-all flex justify-center items-center gap-2 shadow-md shadow-yellow-500/30 hover:shadow-lg hover:shadow-yellow-500/40 hover:-translate-y-1 active:translate-y-0 border-2 border-yellow-300"
                            >
                                {loading ? (
                                    <div className="w-6 h-6 border-4 border-blue-800/30 border-t-blue-800 rounded-full animate-spin"></div>
                                ) : (
                                    <>
                                        <span>BATTLE NOW</span>
                                        <span className="text-xl">‚öîÔ∏è</span>
                                    </>
                                )}
                            </button>
                        </div>
                    ) : (
                        <div className="p-6 animate-fadeIn">
                            <div className="text-center mb-6">
                                <h2 className="text-2xl font-bold text-yellow-300 mb-2">Join The Arena!</h2>
                                <p className="text-blue-200 text-sm">Create your warrior account</p>
                            </div>

                            <div className="relative mb-5 group">
                                <div className="absolute left-4 top-1/2 -translate-y-1/2 text-blue-300 text-lg">
                                    üë§
                                </div>
                                <input
                                    type="text"
                                    value={newUsername}
                                    onChange={(e) => setNewUsername(e.target.value)}
                                    placeholder="Choose a username"
                                    className="w-full py-4 pl-12 pr-4 border-2 border-blue-400 bg-blue-900/50 text-blue-100 rounded-lg text-base transition-all focus:border-yellow-400 focus:shadow-md focus:shadow-yellow-400/20 outline-none placeholder-blue-300"
                                />
                            </div>

                            <div className="relative mb-8 group">
                                <div className="absolute left-4 top-1/2 -translate-y-1/2 text-blue-300 text-lg">
                                    üîí
                                </div>
                                <input
                                    type="password"
                                    value={newPassword}
                                    onChange={(e) => setNewPassword(e.target.value)}
                                    placeholder="Create password"
                                    className="w-full py-4 pl-12 pr-4 border-2 border-blue-400 bg-blue-900/50 text-blue-100 rounded-lg text-base transition-all focus:border-yellow-400 focus:shadow-md focus:shadow-yellow-400/20 outline-none placeholder-blue-300"
                                />
                            </div>

                            <button
                                onClick={handleRegister}
                                className="w-full py-4 bg-gradient-to-r from-yellow-500 to-yellow-400 text-blue-900 rounded-lg font-extrabold text-lg cursor-pointer transition-all flex justify-center items-center gap-2 shadow-md shadow-yellow-500/30 hover:shadow-lg hover:shadow-yellow-500/40 hover:-translate-y-1 active:translate-y-0 border-2 border-yellow-300"
                            >
                                {loading ? (
                                    <div className="w-6 h-6 border-4 border-blue-800/30 border-t-blue-800 rounded-full animate-spin"></div>
                                ) : (
                                    <>
                                        <span>CREATE WARRIOR</span>
                                        <span className="text-xl">üõ°Ô∏è</span>
                                    </>
                                )}
                            </button>
                        </div>
                    )}
                </div>

                {/* Decorative Elements */}
                <div className="flex justify-center mt-6">
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full border-4 border-yellow-400 shadow-lg shadow-blue-500/50 flex items-center justify-center mx-2">
                        <span className="text-2xl">üèÜ</span>
                    </div>
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full border-4 border-yellow-400 shadow-lg shadow-blue-500/50 flex items-center justify-center mx-2">
                        <span className="text-2xl">‚öîÔ∏è</span>
                    </div>
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full border-4 border-yellow-400 shadow-lg shadow-blue-500/50 flex items-center justify-center mx-2">
                        <span className="text-2xl">üõ°Ô∏è</span>
                    </div>
                </div>
            </div>

            {/* Notification */}
            <div
                className={`fixed top-5 right-5 flex items-center justify-center bg-blue-900/90 backdrop-blur-md rounded-lg py-4 px-5 text-white text-sm shadow-xl border-l-4 z-50 transform transition-transform duration-300 ${notification.show ? "translate-x-0" : "translate-x-full"
                    } ${notification.type === "success"
                        ? "border-yellow-400"
                        : notification.type === "error"
                            ? "border-red-500"
                            : notification.type === "warning"
                                ? "border-orange-500"
                                : "border-blue-500"
                    }`}
            >
                <div className="mr-3 text-2xl">
                    {notification.type === "success" && <span className="text-yellow-400">‚úì</span>}
                    {notification.type === "error" && <span className="text-red-500">‚úï</span>}
                    {notification.type === "warning" && <span className="text-orange-500">‚ö†</span>}
                    {notification.type === "info" && <span className="text-blue-500">‚Ñπ</span>}
                </div>
                <div>
                    <p className="text-white font-bold">{notification.message}</p>
                </div>
            </div>
        </div>
    );
}